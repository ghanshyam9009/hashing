Example 1:

Input
["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]

Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.
twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.unfollow(1, 2);  // User 1 unfollows user 2.
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
 













class Twitter {
public:
    Twitter() {

    }
    
    void postTweet(int userId, int tweetId) {
        posts.push_back({userId, tweetId});
    }

    
    vector<int> getNewsFeed(int userId) {
        vector<int> result;
        int count = 10;
    
        for (int i = posts.size() - 1; i >= 0; i--) {
            
            if (count == 0) {
                break;
            }
            
            int followingId = posts[i].first;
            int tweetId = posts[i].second;
            
            if (followMap[userId].find(followingId) != followMap[userId].end() || followingId == userId) {
                result.push_back(tweetId);
                count--;
            }
        }
        return result;
    }

    
    void follow(int followerId, int followeeId) {
        followMap[followerId].insert(followeeId);
    }
    

    void unfollow(int followerId, int followeeId) {
        followMap[followerId].erase(followeeId);
    }

private:
    vector<pair<int, int>> posts;
    unordered_map<int, unordered_set<int>> followMap;
};


// followee -> hero id
// follower -> the man who follow hero
